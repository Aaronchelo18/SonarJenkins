pipeline {
    agent any

    tools {
        maven "MAVEN_HOME"
    }

    stages {
        stage('Clone') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    echo "Limpiando workspace..."
                    cleanWs()
                    echo "Clonando repositorio..."
                    git branch: 'main', url: 'https://github.com/aaronchelo18/ecommerce_Dockerizado.git'
                }
            }
        }
        stage('Build') {
            steps {
                timeout(time: 3, unit: 'MINUTES') {
                    sh "mvn -DskipTests clean package"
                }
            }
        }
        stage('Test') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    sh "mvn test -DskipTests"
                }
            }
        }
        stage('Sonar Analysis') {
            steps {
                timeout(time: 3, unit: 'MINUTES') {
                    withSonarQubeEnv('sonarqube') {
                        sh "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar"
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Deploy Application') {
            steps {
                echo "Iniciando despliegue de la aplicación con Docker Compose..."
                dir('docker') {
                    script {
                        def dockerProjectName = "ecomapp"

                        sh "docker-compose -p ${dockerProjectName} down -v --remove-orphans --rmi local"
                        sh "docker volume rm ${dockerProjectName}_mysql_data || true"

                        echo "Construyendo imágenes y levantando servicios..."
                        sh "docker-compose -p ${dockerProjectName} up -d --build"

                        echo "Esperando a que los servicios se estabilicen..."
                        sleep(90)

                        echo "Despliegue completado."
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline finalizado.'
        }
        success {
            echo '¡Pipeline ejecutado con éxito!'
        }
        failure {
            echo 'Pipeline falló.'
        }
    }
}
